import java.util.regex.Pattern

plugins {
  id "eclipse"
  id "org.openstreetmap.josm" version "0.5.0"
}

repositories {
  jcenter()
}
dependencies {
  testImplementation("org.openstreetmap.josm:josm-unittest:SNAPSHOT"){changing=true}
  def junitVersion = "5.2.0"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
  testImplementation "org.junit.vintage:junit-vintage-engine:$junitVersion"
  testImplementation("com.github.tomakehurst:wiremock:2.18.0")
  testImplementation("org.awaitility:awaitility:3.1.2")
}

tasks.withType(JavaCompile) {
  options.compilerArgs += [
    "-Xlint:all",
    "-Xlint:-serial",
  ]
}

josm {
  manifest {
    oldVersionDownloadLink(14027, "v2.1.4", new URL("https://github.com/JOSM/pt_assistant/releases/download/v2.1.4/pt_assistant.jar"))
    oldVersionDownloadLink(13957, "v2.0.0", new URL("https://github.com/JOSM/pt_assistant/releases/download/v2.0.0/pt_assistant.jar"))
  }
  i18n {
    pathTransformer = getPathTransformer("github.com/JOSM/pt_assistant/blob")
  }
}

test {
    testLogging.exceptionFormat = "full"
}

sourceSets {
  main {
    java {
      srcDirs = ["$projectDir/src"]
    }
    po {
      srcDirs = ["$projectDir/poSrc"]
    }
  }
  test {
    java {
      srcDirs = ["test/unit"]
    }
    resources {
      srcDirs = ["test/data"]
    }
  }
}
tasks.withType(ProcessResources.class).getByName(sourceSets.main.getProcessResourcesTaskName()) {
  from(projectDir) {
    include("images/**")
    include("GPL-*")
    include("README")
    include("LICENSE")
  }
}

// By default the git version is used, if that is not available this tries to get the SVN revision number
if (project.version == null) {
  def process = new ProcessBuilder("svn", "info").directory(project.projectDir).start()
  if (process.waitFor() == 0) {
    def pattern = Pattern.compile("Revision: ([1-9][0-9]*)")
    Arrays.stream(process.inputStream.text.split("\n"))
      .map { pattern.matcher(it) }
      .filter { it.matches() }
      .map { it.group(1) }
      .findFirst()
      .ifPresent { project.version = "r" + it.group(1) }
  }
}
